---
opendistro:
  logstash:
    enabled: true
    filter: |-
      filter {
        if [message] =~ /^{.*}$/ and (![ingress] or ![k8sEvent]) {
           mutate {
              id => "mutate_log_1"
              rename => { "log" => "original_log" }
           }
           json {
             id => "json_message"
             source => "message"
             skip_on_invalid_json => true
             target => "json"
           }
           if [json][status] {
              mutate {
                id => "rm_json_status"
                remove_field => ["[json][status]"]
              }
           }
           if [json][response_body] {
              mutate {
                id => "rm_json_response_body"
                remove_field => ["[json][response_body]"]
              }
           }
           if [json][request_body] {
             grok {
               id => "remove_nil_request_body"
               remove_field => ["[json][request_body]"]
             }
           }
           if [json][time] {
             mutate {
               id => "rm_json_time"
               remove_field => ["[json][time]"]
             }
           }
           if [json][ts] {
             mutate {
               id => "rm_json_ts"
               remove_field => ["[json][ts]"]
             }
           }
           if [json][event][metadata][managedFields] {
              mutate {
                id => "rm_managedFields"
                remove_field => ["[json][event][metadata][managedFields]"]
              }
           }
           if [json][event] {
             mutate {
               id => "rm_json_event"
               remove_field => ["[json][event]"]
             }
           }
           if [json][VMAuth] {
             mutate {
               id => "rm_json_vmauth"
               remove_field => ["[json][VMAuth]"]
             }
           }
        } else {
          grok {
            id => "grok_multi"
            match => {
              "message" => [
                "(((?<brick>[a-zA-Z\-0-9]+)_(?<application>[a-zA-Z\-0-9]+)\s)|((?<application>[a-zA-Z\-0-9]+)\s)|(.{0}))(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) \[(?<transaction>[A-Za-z0-9\-_\.]*),{0,1}(?<traceId>[A-Za-z0-9\-_\.]*),(?<spanId>[A-Za-z0-9\-_\.]*)\]\[%{GREEDYDATA:thread}\] %{LOGLEVEL:level}[ ]+%{NOTSPACE:class} - %{GREEDYDATA:text}",
                "(((?<brick>[a-zA-Z\-0-9]+)_(?<application>[a-zA-Z\-0-9]+)\s)|((?<application>[a-zA-Z\-0-9]+)\s)|(.{0}))(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) %{LOGLEVEL:level} \[(?<transaction>[A-Za-z0-9\-_\.]*),{0,1}(?<traceId>[A-Za-z0-9\-_\.]*),(?<spanId>[A-Za-z0-9\-_\.]*),([A-Za-z0-9\-_\.]*)\] ([0-9]*) --- \[%{GREEDYDATA:thread}\] %{NOTSPACE:class}[ ]+: %{GREEDYDATA:text}",
                "(((?<brick>[a-zA-Z\-0-9]+)_(?<application>[a-zA-Z\-0-9]+)\s)|((?<application>[a-zA-Z\-0-9]+)\s)|(.{0}))(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) \[(?<processId>[A-Za-z\-0-9]*),(?<solutionId>[A-Za-z0-9\-_\.]*),{0,1}(?<traceId>[A-Za-z0-9\-_\.]*),(?<spanId>[A-Za-z0-9\-_\.]*)\]\[%{GREEDYDATA:thread}\] %{LOGLEVEL:level}[ ]+%{NOTSPACE:class} - %{GREEDYDATA:text}",
                "(?<event>([A-Z][0-9]{0,4})) %{TIME:time}%{SPACE}%{NUMBER:n} (?<appsrc>%{WORD}\.%{WORD}:\d{1,})\] %{GREEDYDATA:msg}"
              ]
            }
          }
          mutate {
            id => "mutate_log"
            rename => { "log" => "original_log" }
            rename => { "text" => "log" }
            remove_field => ["time"]
          }
          json {
            id => "json_log"
            source => "log"
            skip_on_invalid_json => true
            target => "jsonLog"
          }
          if [message] =~ "\tat" {
            grok {
              id => "grok_tat"
              match => ["message", "^(\tat)"]
              add_tag => ["stacktrace"]
            }
          }

          if [log] {
            mutate {
              id => "log_remove_field2"
              remove_field => [ "message" ]
            }
          }
          if [jsonLog][body] {
            mutate {
              remove_field => "[jsonLog][body]"
            }
          }
        }
        date {
          id => "date"
          match => ["timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "ISO8601"]
        }
        mutate {
            id => "add_cluster"
            add_field => { "cluster" => "yc-techno.prod" }
        }
        if ![kubernetes][namespace] {
          mutate {
            id => "filebeat_index"
            add_field => { "[@metadata][target_index]" => "filebeat" }
          }
        } else if [kubernetes][namespace] =~ /keycloak.*/ {
          mutate {
            id => "kc_index"
            add_field => { "[@metadata][target_index]" => "%{[kubernetes][namespace]}" }
          }
        } else {
          grok {
            id => "grok_targetindex"
            match => { "[kubernetes][namespace]" => "(?<[@metadata][target_index]>^[^-]+)" }
          }
        }
        mutate {
          id => "copy_prod_id"
          copy => { "[kubernetes][namespace_labels][product-id]" => "product_id" }
        }
        mutate {
          id => "lowercase_prod_id"
          lowercase => [ "product_id" ]
        }
        if [ingress][upstream_response_time] {
          mutate {
            id => "ingress_nginx_float"
            convert => { "[ingress][upstream_response_time]" => "float" }
          }
        }
      }
