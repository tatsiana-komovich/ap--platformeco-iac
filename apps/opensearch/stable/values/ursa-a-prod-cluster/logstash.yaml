---
opendistro:
  logstash:
    enabled: true
    filter: |-
      filter {
        grok {
          match => {
            "message" => [
              "(((?<brick>[a-zA-Z\-0-9]+)_(?<application>[a-zA-Z\-0-9]+)\s)|((?<application>[a-zA-Z\-0-9]+)\s)|(.{0}))(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) \[(?<transaction>[A-Za-z0-9\-_\.]*),{0,1}(?<traceId>[A-Za-z0-9\-_\.]*),(?<spanId>[A-Za-z0-9\-_\.]*)\]\[%{GREEDYDATA:thread}\] %{LOGLEVEL:level}[ ]+%{NOTSPACE:class} - %{GREEDYDATA:text}",
              "(((?<brick>[a-zA-Z\-0-9]+)_(?<application>[a-zA-Z\-0-9]+)\s)|((?<application>[a-zA-Z\-0-9]+)\s)|(.{0}))(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) %{LOGLEVEL:level} \[(?<transaction>[A-Za-z0-9\-_\.]*),{0,1}(?<traceId>[A-Za-z0-9\-_\.]*),(?<spanId>[A-Za-z0-9\-_\.]*),([A-Za-z0-9\-_\.]*)\] ([0-9]*) --- \[%{GREEDYDATA:thread}\] %{NOTSPACE:class}[ ]+: %{GREEDYDATA:text}",
              "(((?<brick>[a-zA-Z\-0-9]+)_(?<application>[a-zA-Z\-0-9]+)\s)|((?<application>[a-zA-Z\-0-9]+)\s)|(.{0}))(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) \[(?<processId>[A-Za-z\-0-9]*),(?<solutionId>[A-Za-z0-9\-_\.]*),{0,1}(?<traceId>[A-Za-z0-9\-_\.]*),(?<spanId>[A-Za-z0-9\-_\.]*)\]\[%{GREEDYDATA:thread}\] %{LOGLEVEL:level}[ ]+%{NOTSPACE:class} - %{GREEDYDATA:text}",
              "(?<event>([A-Z][0-9]{0,4})) %{TIME:time}%{SPACE}%{NUMBER:n} (?<appsrc>%{WORD}\.%{WORD}:\d{1,})\] %{GREEDYDATA:msg}"
            ]
          }
        }

        mutate {
          id => "rename"
          rename => { "log" => "original_log" }
          rename => { "text" => "log" }
          remove_field => ["time"]
        }

        json {
          id => "json_from_log"
          source => "log"
          skip_on_invalid_json => true
          target => "jsonLog"
        }

        if [message] =~ "\tat" {
          grok {
            match => ["message", "^(\tat)"]
            add_tag => ["stacktrace"]
          }
        }

        if [log] {
          mutate {
            id => "mutate_remove_message"
            remove_field => [ "message" ]
          }
        }

        if [kubernetes][labels][component] =~ "mr-crawler-.+" {
          if [jsonLog][ts] {
            mutate {
              id => "mutate_remove_field_ts"
              remove_field => [ "[jsonLog][ts]" ]
            }
          }
        }

        date {
          id => "date"
          match => ["timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "ISO8601"]
        }

        if ![kubernetes][namespace] {
          mutate {
            id => "target_index_filebeat"
            add_field => { "[@metadata][target_index]" => "filebeat" }
          }
        }
        else if [kubernetes][labels][opendistro_index] {
          mutate {
            id => "mutate_opendist_idx"
            add_field => { "[@metadata][target_index]" => "%{[kubernetes][labels][opendistro_index]}" }
          }
          json {
            id => "json_from_message"
            source => "message"
            skip_on_invalid_json => true
            target => "jsonLog"
          }
          if [kubernetes][labels][component] =~ "mr-crawler-.+" {
            if [jsonLog][ts] {
              mutate {
                id => "mutate_remove_field_ts_in_idx"
                remove_field => [ "[jsonLog][ts]" ]
              }
            }
          }
        }
        else {
          grok {
            id => "target_index_by_ns"
            match => { "[kubernetes][namespace]" => "(?<[@metadata][target_index]>^[^-]+)" }
          }
        }
        if [ingress][upstream_response_time] {
          mutate {
            id => "convert_response_time"
            convert => { "[ingress][upstream_response_time]" => "float" }
          }
        }
      }
