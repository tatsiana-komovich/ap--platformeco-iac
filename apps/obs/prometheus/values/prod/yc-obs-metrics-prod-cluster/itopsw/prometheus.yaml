---
prometheus:
  prometheus:
    enabled: true

    serviceAccount:
      create: true
      name: 'promaas-itopsw'

    service:
      # clusterIP: "None"
      sessionAffinity: ClientIP
      sessionAffinityConfig:
        clientIP:
          timeoutSeconds: 10800

    # servicePerReplica:
    #   enabled: true

    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/use-regex: 'true'
        nginx.ingress.kubernetes.io/affinity: 'cookie'
        nginx.ingress.kubernetes.io/affinity-mode: 'persistent'
        nginx.ingress.kubernetes.io/session-cookie-name: 'PROMETHEUSAFFINITY'
        nginx.ingress.kubernetes.io/session-cookie-path: '/prometheus'
        nginx.ingress.kubernetes.io/session-cookie-expires: '10800'
        nginx.ingress.kubernetes.io/session-cookie-max-age: '10800'
        nginx.ingress.kubernetes.io/rewrite-target: /$2
      hosts:
        - itopsw-metrics.obs.lmru.tech
      paths:
        - /prometheus(/|$)(.*)
      pathType: ImplementationSpecific
      tls:
        - hosts:
            - 'itopsw-metrics.obs.lmru.tech'

    podDisruptionBudget:
      enabled: true
      minAvailable: 1

    serviceMonitor:
      selfMonitor: false
      additionalLabels:
        prometheus: main

    prometheusSpec:

      ruleNamespaceSelector:
        matchLabels:
          promaas-customer-name: itopsw

      scrapeInterval: '30s'
      scrapeTimeout: '10s'
      evaluationInterval: '30s'
      enableAdminAPI: false
      retention: 15d
      retentionSize: 800GB
      disableCompaction: false
      enableRemoteWriteReceiver: true
      externalUrl: 'https://itopsw-metrics.obs.lmru.tech/prometheus/'
      logLevel: info
      logFormat: json
      ruleSelectorNilUsesHelmValues: false
      maximumStartupDurationSeconds: 1200
      # configMaps:
      #   - 'itopsw-targets'
      # scrapeConfigSelector:
      #   matchLabels:
      #     prometheus: 'itopsw-prom'

      additionalScrapeConfigsSecret:
        enabled: true
        name: additional-scrape-configs
        key: additional-scrape-configs.yaml

      additionalArgs:
        - name: enable-feature
          value: auto-gomemlimit
        - name: storage.tsdb.max-block-duration
          value: 1h
        - name: storage.tsdb.min-block-duration
          value: 1h

      externalLabels:
        owner: itopsw

      ## The remote_write spec configuration for Prometheus.
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#remotewritespec
      # remoteWrite:
      #   - url: "https://mimir-metrics-stage.obs.lmru.tech/api/v1/push"
      #     headers:
      #       "X-Scope-OrgID": "itopsw-prod"
      ## additionalRemoteWrite is appended to remoteWrite

      remoteWrite:
        - url: "https://keycloak-mimir-yc-techno-stage.apps.lmru.tech/api/v1/push"
          writeRelabelConfigs:
            - sourceLabels: [__name__]
              regex: (nginxplus_server_zone_responses|nginxplus_server_zone_requests|nginxplus_upstream_server_response_time|nginxplus_upstream_server_requests|nginxplus_upstream_server_responses)
              action: "keep"
            - sourceLabels: [instance]
              regex: .*-722-.*
              action: "keep"

      additionalRemoteWrite: []

      ## Allow out-of-order/out-of-bounds samples ingested into Prometheus for a specified duration
      ## See https://prometheus.io/docs/prometheus/lakong/configuration/configuration/#tsdb
      tsdb:
        outOfOrderTimeWindow: 10m

      image:
        registry: docker.art.lmru.tech
        repository: prometheus/prometheus
      # if not set appVersion field from Chart.yaml is  used
        tag: v2.55.1

      replicas: 2
      shards: 1

      resources:
        requests:
          cpu: 20
          memory: 80Gi
        limits:
          memory: 80Gi

      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: network-ssd
            accessModes: ['ReadWriteOnce']
            resources:
              requests:
                storage: 900Gi

      priorityClassName: 'production-high'

      nodeSelector:
        node-role/prometheus-xxxlarge: ''

      tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: prometheus

      podAntiAffinity: 'hard'
      # podAntiAffinityTopologyKey: kubernetes.io/hostname
      podAntiAffinityTopologyKey: kubernetes.io/zone
