---
extraLabels: {}

nameOverride: ""
fullnameOverride: ""
timeout: 3m

csi:
  attacher:
    image:
      repository: docker-remote-k8s-io.art.lmru.tech/sig-storage/csi-attacher
      tag: v4.7.0
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
    extraEnv: []
  provisioner:
    topology: "true"
    image:
      repository: docker-remote-k8s-io.art.lmru.tech/sig-storage/csi-provisioner
      tag: v5.1.0
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
    extraEnv: []
  snapshotter:
    image:
      repository: docker-remote-k8s-io.art.lmru.tech/sig-storage/csi-snapshotter
      tag: v8.1.0
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
    extraEnv: []
  resizer:
    image:
      repository: docker-remote-k8s-io.art.lmru.tech/sig-storage/csi-resizer
      tag: v1.12.0
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
    extraEnv: []
  livenessprobe:
    image:
      repository: docker-remote-k8s-io.art.lmru.tech/sig-storage/livenessprobe
      tag: v2.14.0
      pullPolicy: IfNotPresent
    failureThreshold: 5
    initialDelaySeconds: 10
    timeoutSeconds: 10
    periodSeconds: 60
    resources: {}
    extraArgs: {}
    extraEnv: []
  nodeDriverRegistrar:
    image:
      repository: docker-remote-k8s-io.art.lmru.tech/sig-storage/csi-node-driver-registrar
      tag: v2.12.0
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
    extraEnv: []
  plugin:
    image:
      repository: docker-remote-k8s-io.art.lmru.tech/provider-os/cinder-csi-plugin
      pullPolicy: IfNotPresent
      tag: v1.32.0
    volumes:
      - name: cacert
        hostPath:
          path: /etc/cacert
    volumeMounts:
      - name: cacert
        mountPath: /etc/cacert
        readOnly: true
      - name: cloud-config
        mountPath: /etc/kubernetes
        readOnly: true
    nodePlugin:
      dnsPolicy: ClusterFirstWithHostNet
      # Optional additional annotations to add to the nodePlugin Pods.
      podAnnotations: {}
      # Optional additional labels to add to the nodePlugin Pods.
      podLabels: {}
      podSecurityContext: {}
      securityContext: {}
        # capabilities:
        #   drop:
        #   - ALL
        # seccompProfile:
        #   type: RuntimeDefault
      affinity: {}
      nodeSelector: {}
      tolerations:
        - operator: Exists
      kubeletDir: /var/lib/kubelet
      # Allow for specifying internal IP addresses for multiple hostnames
      # hostAliases:
      #   - ip: "10.0.0.1"
      #     hostnames:
      #     - "keystone.hostname.com"
    controllerPlugin:
      replicas: 2
      strategy:
        # RollingUpdate strategy replaces old pods with new ones gradually,
        # without incurring downtime.
        type: RollingUpdate
        rollingUpdate:
          # maxUnavailable is the maximum number of pods that can be
          # unavailable during the update process.
          maxUnavailable: 1
          # maxSurge is the maximum number of pods that can be
          # created over the desired number of pods.
          maxSurge: 1
      # Optional additional annotations to add to the controllerPlugin Pods.
      podAnnotations: {}
      # Optional additional labels to add to the controllerPlugin Pods.
      podLabels: {}
      podSecurityContext: {}
        # runAsNonRoot: true
        # runAsUser: 65532
        # runAsGroup: 65532
        # fsGroup: 65532
        # fsGroupChangePolicy: OnRootMismatch
      securityContext: {}
        # capabilities:
        #   drop:
        #   - ALL
        # seccompProfile:
        #   type: RuntimeDefault
        # readOnlyRootFilesystem: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.kubernetes.io/region
                    operator: In
                    values:
                      - x1
                      - x2
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: component
                    operator: In
                    values:
                      - controllerplugin
              topologyKey: "kubernetes.io/hostname"
      nodeSelector: {}
      tolerations: []
      # Allow for specifying internal IP addresses for multiple hostnames
      # hostAliases:
      #   - ip: "10.0.0.1"
      #     hostnames:
      #     - "keystone.hostname.com"
    resources: {}
    # Enable built-in http server through the http-endpoint flag
    httpEndpoint:
      enabled: false
      port: 8080
    # Create Prometheus Operator PodMonitor. Requires http server above.
    # See https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#monitoring.coreos.com/v1.PodMonitor
    podMonitor:
      enabled: false
      additionalLabels: {}
    extraArgs: {}

    extraEnv: []

# Log verbosity level.
# See https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/logging.md
# for description of individual verbosity levels.
logVerbosityLevel: 2

# the secret should contain the openstack credentials
# there are several options to inject the credentials:
# 1) from kubernetes secret that doesn't exist: set "enabled" and "create" to true, this will create a secret from the values written to "data" down below
# 2) from kubernetes secret that already exists: set "enabled" to true and "create" to false
# 3) from host system path /etc/cloud/cloud.conf: set "enabled" to false and "hostMount" to true
# 4) via agent-injector (e.g. hashicorp vault): set "enabled" and "hostMount" to false, you have to provide credentials on your own by injecting credentials into the pod
secret:
  enabled: true
  hostMount: false
  create: true
  filename: cloud.conf
  name: cinder-csi-cloud-config
  data:
    cloud.conf: |-
      [Global "x1"]
      auth-url = "https://x1-a.api.cloud.lmru.tech:5000/v3/"
      domain-name = "LMRU"
      tenant-id = "a68b89f1bcdf4ba8b6b40b36b1bccf32"
      username = "<path:services/data/kafka-ha#x1_cloud_Username>"
      password = "<path:services/data/kafka-ha#x1_cloud_Password>"
      region = ""

      [Global "x2"]
      auth-url = "https://x2-a.api.cloud.lmru.tech:5000/v3/"
      domain-name = "LMRU"
      tenant-id = "8d2bdbf4b4484eaab882e508de9c5a67"
      username = "<path:services/data/kafka-ha#x2_cloud_Username>"
      password = "<path:services/data/kafka-ha#x2_cloud_Password>"
      region = ""

      [BlockStorage]
      ignore-volume-microversion = false
      rescan-on-resize = true
      ignore-volume-az=true
      bs-version=v3

storageClass:
  enabled: true
  delete:
    isDefault: false
    allowVolumeExpansion: true
  retain:
    isDefault: false
    allowVolumeExpansion: true
# any kind of custom StorageClasses
#   custom: |-
#     ---
#     apiVersion: storage.k8s.io/v1
#     kind: StorageClass
#     metadata:
#       name: sas
#     provisioner: cinder.csi.openstack.org
#     volumeBindingMode: WaitForFirstConsumer
#     allowVolumeExpansion: true
#     parameters:
#       type: SAS
#     ---
#     apiVersion: snapshot.storage.k8s.io/v1
#     kind: VolumeSnapshotClass
#     metadata:
#       name: csi-cinder-snapclass
#     driver: cinder.csi.openstack.org
#     deletionPolicy: Delete

# You may set ID of the cluster where openstack-cinder-csi is deployed. This value will be appended
# to volume metadata in newly provisioned volumes as `cinder.csi.openstack.org/cluster=<cluster ID>`.
clusterID: "p-kafka-ha"

priorityClassName: ""

imagePullSecrets: []
# - name: my-imagepull-secret

# add annotations to all pods, deployment, daemonset and podmonitor
commonAnnotations: {}
